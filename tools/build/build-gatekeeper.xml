<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Help"  xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<!-- Import required targets and configuration items. -->
	<Import Project="bin\MSBuild.Community.Tasks.Targets"/>
	<Import Project="build.config"/>

	<!--
		Determine directory tree and subversion URLs from user input values.

		$(BuildLocation) is specified in build.config and is used as the root
		location for all files in the build.  Beneath it are three sub-trees:

		  source - Retrieval destination for Subversion.
		  output - Holding bin for compiled binaries.
		  staging - Copy of all files to be deployed (i.e. without source code).
	-->
	<PropertyGroup>
		<SourceLocation>$(WORKSPACE)</SourceLocation>

		<TempBase>$(TEMP)\Build-$(BUILD_NUMBER)</TempBase>
		
		<OutputFolder>$(TempBase)\output\</OutputFolder>
		<StagingLocation>$(TempBase)\staging\</StagingLocation>
	</PropertyGroup>
  
	<!--
		File lists used by the Build target.  See comments in the target
		for details.
	-->
	<ItemGroup>
		<FakeAdminConfig Include="$(SourceLocation)\app\Admin\web.config" />
		<FakeAdminSharedConfig Include="$(SourceLocation)\app\Admin\sharedconfig\connectionStrings.config" />
		<FakeProcMgrConfig Include="$(SourceLocation)\app\ProcMgr\app.config" />
		<FakeProcMgrSharedConfig Include="$(SourceLocation)\app\ProcMgr\sharedconfig\connectionStrings.config" />
		<FakeWebSvcConfig Include="$(SourceLocation)\app\WebSvc\web.config" />
		<FakeWebSvcSharedConfig Include="$(SourceLocation)\app\WebSvc\sharedconfig\connectionStrings.config" />
		<FakeCDRPreviewConfig Include="$(SourceLocation)\app\CdrPreviewWS\web.config" />
		<FakeCDRPreviewSharedConfig Include="$(SourceLocation)\app\CdrPreviewWS\sharedconfig\connectionStrings.config" />
		<FakePromoTesterConfig Include="$(SourceLocation)\Test Harnesses\PromotionTester\app.config" />
		<FakeUnitTestrConfig Include="$(SourceLocation)\Test Harnesses\UnitTest\UnitTest.dll.config" />
		<NonDeployedFiles Include="$(SourceLocation)\app\*.pdb;$(SourceLocation)\app\*.pdb" />
	</ItemGroup>

	<PropertyGroup>
		<FakeConfigLines>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;&lt;configuration&gt;&lt;/configuration></FakeConfigLines>
	</PropertyGroup>
  
	<!--
	Build the solution and copy only the necessary files to the staging folder.
	-->
	<Target Name="Build">
		<!-- 
		  Create fake config files.  We don't version control the web.config
		  in the application root folder, but the publishing portion of the
		  build step will fail if it can't find one.  Rather than very painfully
		  (and undoubted brittlely) trying to recreate the publishing step,
		  we just create a fake web.config and then delete it afterward.
		-->
		<MakeDir Directories="$(SourceLocation)\app\Admin\sharedconfig" />
		<MakeDir Directories="$(SourceLocation)\app\ProcMgr\sharedconfig" />
		<MakeDir Directories="$(SourceLocation)\app\WebSvc\sharedconfig" />
		<MakeDir Directories="$(SourceLocation)\app\CdrPreviewWS\sharedconfig" />
		<WriteLinesToFile File="@(FakeAdminConfig)" />
		<WriteLinesToFile File="@(FakeAdminSharedConfig)" />
		<WriteLinesToFile File="@(FakeProcMgrConfig)" Lines="$(FakeConfigLines)" />
		<WriteLinesToFile File="@(FakeWebSvcConfig)" />
		<WriteLinesToFile File="@(FakeCDRPreviewConfig)" />
		<WriteLinesToFile File="@(FakePromoTesterConfig)" Lines="$(FakeConfigLines)" />
		<WriteLinesToFile File="@(FakeUnitTestrConfig)" Lines="$(FakeConfigLines)" />

		<!--
		  In order to make publishing work, we have to specify locations for
		  both OutDir and WebProjectOutputDir.
		-->

		<Message Text="Clean up intermediate output folder: $(OutputFolder)"/>
		<RemoveDir Directories="$(OutputFolder)" />

		<Message Text="Clean up staging folder: $(StagingLocation)"/>
		<RemoveDir Directories="$(StagingLocation)" />
		<!--<MakeDir Directories="$(StagingLocation)" />-->

		<!-- Write revision note file. -->
		<Message Text="Notefile in $(SourceLocation)."/>
		<WriteLinesToFile File="$(SourceLocation)\$(BuildNoteFile)" Lines="Version: $(Branch);" />
		<WriteLinesToFile File="$(SourceLocation)\$(BuildNoteFile)" Lines="Revision: $(Revision)" />
		<WriteLinesToFile File="$(SourceLocation)\$(BuildNoteFile)" Lines="Build Target: $(TargetEnvironment)" />

		<Message Text="Build applications"/>

		<!-- Admin tool -->
		<MSBuild
			Projects="$(SourceLocation)\$(SolutionName)"
			Properties="Configuration=Release; Platform=Any CPU; WarningLevel=0;  OutDir=$(OutputFolder); WebProjectOutputDir=$(OutputFolder)$(AdminFolder) "
			Targets="$(AdminProjectname);"
		/>

		 <!-- Web service -->
		<MSBuild
			Projects="$(SourceLocation)\$(SolutionName)"
			Properties="Configuration=Release; Platform=Any CPU; WarningLevel=0;  OutDir=$(OutputFolder); WebProjectOutputDir=$(OutputFolder)$(WebSvcFolder) "
			Targets="$(WebSvcProjectname);"
		/>

		 <!-- CDR Preview service -->
		<MSBuild
			Projects="$(SourceLocation)\$(SolutionName)"
			Properties="Configuration=Release; Platform=Any CPU; WarningLevel=0;  OutDir=$(OutputFolder); WebProjectOutputDir=$(OutputFolder)$(CDRPreviewFolder) "
			Targets="$(CDRPreviewProjectname);"
		/>

		 <!-- Process Manager -->
		<MSBuild
			Projects="$(SourceLocation)\$(SolutionName)"
			Properties="Configuration=Release; Platform=Any CPU; WarningLevel=0;  OutDir=$(OutputFolder)$(ProcMgrFolder)\ "
			Targets="$(ProcMgrProjectname);"
		/>

		<!-- Copy built code to staging location. -->
		<RoboCopy
			SourceFolder="$(OutputFolder)$(AdminFolder)" DestinationFolder="$(StagingLocation)$(AdminFolder)"
			Mirror="True" ExcludeFiles="*.config;*.pdb;" ExcludeFolders="sharedconfig"
		/>
		<RoboCopy
			SourceFolder="$(OutputFolder)$(WebSvcFolder)" DestinationFolder="$(StagingLocation)$(WebSvcFolder)"
			Mirror="True" ExcludeFiles="*.config;*.pdb;" ExcludeFolders="sharedconfig"
		/>
		<RoboCopy
			SourceFolder="$(OutputFolder)$(CDRPreviewFolder)" DestinationFolder="$(StagingLocation)$(CDRPreviewFolder)"
			Mirror="True" ExcludeFiles="*.config;*.pdb;" ExcludeFolders="sharedconfig"
		/>
		<RoboCopy
			SourceFolder="$(OutputFolder)$(ProcMgrFolder)" DestinationFolder="$(StagingLocation)$(ProcMgrFolder)"
			Mirror="True" ExcludeFiles="*.config;*.pdb;" ExcludeFolders="sharedconfig"
		/>

		<!-- Copy XSL to staging location. -->
		<RoboCopy
			SourceFolder="$(SourceLocation)\Core\ContentRendering\XSL" DestinationFolder="$(StagingLocation)\XSL"
			Mirror="True"
		/>

		<!-- Copy Dtd to staging location -->
		<RoboCopy
			SourceFolder="$(SourceLocation)\App\Dtd" DestinationFolder="$(StagingLocation)\Dtd"
			Mirror="True"
		/>

		<!-- Copy build note to staging location -->
		<Copy SourceFiles="$(SourceLocation)\$(BuildNoteFile)" DestinationFolder ="$(StagingLocation)\$(AdminFolder)" />
		<Copy SourceFiles="$(SourceLocation)\$(BuildNoteFile)" DestinationFolder ="$(StagingLocation)\$(WebSvcFolder)" />
		<Copy SourceFiles="$(SourceLocation)\$(BuildNoteFile)" DestinationFolder ="$(StagingLocation)\$(ProcMgrFolder)" />
		<Copy SourceFiles="$(SourceLocation)\$(BuildNoteFile)" DestinationFolder ="$(StagingLocation)\$(CDRPreviewFolder)" />

		<Message Text="Debug NonDeployedFiles @(NonDeployedFiles)"/>
		<!--<Delete Files="@(NonDeployedFiles)" />-->

		<Delete Files="@(FakeAdminConfig);@(FakeProcMgrConfig);@(FakeWebSvcConfig);@(FakeCDRPreviewConfig);@(NonDeployedFiles)" />
	</Target>

  
	<Target Name="SaveExecutables">
	
		<Message Text="*********************************************" />
		<Message Text="*                                           *" />
		<Message Text="*                                           *" />
		<Message Text="*                                           *" />
		<Message Text="*  SaveExecutables is not yet implemented.  *" />
		<Message Text="*                                           *" />
		<Message Text="*                                           *" />
		<Message Text="*                                           *" />
		<Message Text="*********************************************" />
	
		<!--
		  Tag Name = R + RevisionNumber + TargetEnvironment
		-->
		<!--
		<CreateProperty Value="$(Branch)-$(TargetEnvironment)-R$(Revision)">
		  <Output TaskParameter="Value" PropertyName="TagName"/>
		</CreateProperty>
		-->

		<!--
		<CreateProperty Value="$(SVNBuildsFolder)$(TagName)">
		  <Output TaskParameter="Value" PropertyName="BuildsUrl" />
		</CreateProperty>
		-->

		<!--Message Text="Saving executables to: $(TagName)"/-->
		<!--
		  SvnClient is a wrapper for the svn command line.
		  The import command line orders repository and file system path
		  opposite of most other commands, so we have to do put the "wrong"
		  values in RepositoryPath and LocalPath.
		-->
		<!--SvnClient RepositoryPath="$(BuildLocation)\staging"
		  LocalPath="$(BuildsUrl)"
		  Command="import"
		  Message="Automatic build of GateKeeper Revision $(Revision) for the $(TargetEnvironment) environment."
		/-->
	</Target>
  
	<!--
		The "main" target which defines the list and order of other
		targets to be run.
	-->
	<Target Name="All">
		<CallTarget Targets="Build"/>
		<CallTarget Targets="SaveExecutables"/>
		<CallTarget Targets="ApplySourceCodeTag"/>
	</Target>

	<Target Name="Help">
		<Message Text="To run this script, enter the command:" />
		<Message Text="" />
		<Message Text="  msbuild BuildMaster.xml /p:Branch={name} /target:All" />
		<Message Text="" />
		<Message Text="Where {name} is the specific branch to be built." />
	</Target>
  
</Project>